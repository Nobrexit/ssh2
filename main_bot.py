#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SSH Bot Premium - Sistema Completo Integrado
Arquivo principal que integra todos os m√≥dulos
"""

import os
import sys
import json
import logging
import asyncio
import signal
from datetime import datetime
from typing import Dict, List, Optional


# Importa m√≥dulos do bot
from bot_ssh_completo import SSHBot, BotConfig, DatabaseManager
from mercado_pago_integration import PaymentManager
from notification_system import NotificationManager, NotificationConfig, BroadcastManager, UserMessageManager
from admin_config_system import AdminConfigManager, QuickConfigCommands
from webhook_server import WebhookServer, WebhookManager

# Importa depend√™ncias do Telegram
from telegram import Bot
from telegram.ext import Application, ConversationHandler, CommandHandler, CallbackQueryHandler, MessageHandler, filters

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class IntegratedSSHBot:
    """Bot SSH integrado com todos os m√≥dulos"""
    
    def __init__(self, config_file: str = "config.json"):
        self.config_file = config_file
        self.config = self.load_config()
        
        # Inicializa componentes
        self.db = DatabaseManager(self.config.database_path)
        self.bot_instance = None
        self.application = None
        
        # Gerenciadores
        self.payment_manager = None
        self.notification_manager = None
        self.broadcast_manager = None
        self.user_message_manager = None
        self.admin_config_manager = None
        self.webhook_server = None
        self.webhook_manager = None
        
        # Estado do sistema
        self.is_running = False
        self.webhook_thread = None
        
    def load_config(self) -> BotConfig:
        """Carrega configura√ß√£o do arquivo JSON"""
        try:
            if not os.path.exists(self.config_file):
                logger.warning(f"Arquivo de configura√ß√£o {self.config_file} n√£o encontrado. Criando padr√£o...")
                self.create_default_config()
            
            with open(self.config_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            return BotConfig(
                token=data.get('bot_token', ''),
                mercado_pago_access_token=data.get('mercado_pago_access_token', ''),
                admin_ids=data.get('admin_ids', []),
                notification_group_id=data.get('notification_group_id', 0),
                ssh_servers=data.get("ssh_servers", []),
                webhook_url=data.get("webhook_url", ""),
                bot_active=data.get("bot_active", True)
            )
            
        except Exception as e:
            logger.error(f"Erro ao carregar configura√ß√£o: {e}")
            return BotConfig()
    
    def create_default_config(self):
        """Cria arquivo de configura√ß√£o padr√£o"""
        default_config = {
            "bot_token": "SEU_TOKEN_DO_BOT_AQUI",
            "mercado_pago_access_token": "SEU_ACCESS_TOKEN_MP_AQUI",
            "admin_ids": [123456789],
            "notification_group_id": -1001234567890,
            "webhook_url": "https://seu-dominio.com",
            "ssh_servers": [
                {
                    "name": "Servidor Principal",
                    "ip": "SEU-IP-AQUI",
                    "password": "SUA-SENHA-AQUI",
                    "port": 22,
                    "active": True
                }
            ],
            "pricing": {
                "weekly": {
                    "price": 10.00,
                    "duration_days": 7,
                    "description": "Plano Semanal"
                },
                "monthly": {
                    "price": 20.00,
                    "duration_days": 30,
                    "description": "Plano Mensal"
                }
            },
            "messages": {
                "welcome": "üåü Bem-vindo ao SSH Bot Premium!",
                "test_limit": "‚ùå Voc√™ j√° criou um teste nas √∫ltimas 24 horas.",
                "server_error": "‚ùå Erro tempor√°rio. Tente novamente em alguns minutos."
            }
        }
        
        with open(self.config_file, 'w', encoding='utf-8') as f:
            json.dump(default_config, f, indent=2, ensure_ascii=False)
        
        logger.info(f"Arquivo de configura√ß√£o padr√£o criado: {self.config_file}")
    
    async def initialize(self):
        """Inicializa todos os componentes do bot"""
        try:
            logger.info("üöÄ Inicializando SSH Bot Premium...")
            
            # Valida configura√ß√£o
            if not self.config.token:
                raise ValueError("Token do bot n√£o configurado!")
            
            if not self.config.bot_active:
                logger.info("Bot est√° desativado na configura√ß√£o. N√£o ser√° iniciado.")
                return
            
            # Inicializa bot principal
            self.bot_instance = SSHBot(self.config)
            self.application = Application.builder().token(self.config.token).build()
            
            # Inicializa gerenciadores
            await self._initialize_managers()
            
            # Configura handlers
            self._setup_handlers()
            
            # Inicializa webhook se configurado
            if self.config.webhook_url and self.config.mercado_pago_access_token:
                await self._initialize_webhook()
            
            logger.info("‚úÖ Todos os componentes inicializados com sucesso!")
            
        except Exception as e:
            logger.error(f"‚ùå Erro na inicializa√ß√£o: {e}")
            raise
    
    async def _initialize_managers(self):
        """Inicializa todos os gerenciadores"""
        # Payment Manager
        if self.config.mercado_pago_access_token:
            self.payment_manager = PaymentManager(
                self.config.mercado_pago_access_token,
                self.db,
                sandbox=True  # Mude para False em produ√ß√£o
            )
            logger.info("‚úÖ Payment Manager inicializado")
        
        # Notification Manager
        notification_config = NotificationConfig(
            sales_group_id=self.config.notification_group_id,
            admin_group_id=self.config.notification_group_id,
            enable_sales_notifications=True,
            enable_admin_notifications=True,
            enable_user_notifications=True
        )
        
        bot = Bot(token=self.config.token)
        self.notification_manager = NotificationManager(bot, notification_config, self.db)
        self.broadcast_manager = BroadcastManager(bot, self.db)
        self.user_message_manager = UserMessageManager(bot, self.db)
        logger.info("‚úÖ Notification Managers inicializados")
        
        # Admin Config Manager
        self.admin_config_manager = AdminConfigManager(self.bot_instance, self.db, self.config_file)
        logger.info("‚úÖ Admin Config Manager inicializado")
    
    async def _initialize_webhook(self):
        """Inicializa servidor webhook"""
        try:
            self.webhook_manager = WebhookManager(self.config.webhook_url)
            self.webhook_server = WebhookServer(
                self.bot_instance,
                self.payment_manager,
                self.notification_manager,
                port=5000
            )
            
            # Inicia webhook em thread separada
            self.webhook_thread = self.webhook_server.run_threaded()
            
            webhook_url = self.webhook_manager.get_mercadopago_webhook_url()
            logger.info(f"‚úÖ Webhook server iniciado: {webhook_url}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar webhook: {e}")
    
    def _setup_handlers(self):
        """Configura todos os handlers do bot"""
        # Handlers do bot principal
        self.application.add_handler(CommandHandler("start", self.bot_instance.start_command))
        self.application.add_handler(CallbackQueryHandler(self.bot_instance.create_test_callback, pattern="create_test"))
        self.application.add_handler(CallbackQueryHandler(self.bot_instance.buy_plan_callback, pattern="^buy_"))
        self.application.add_handler(CallbackQueryHandler(self.bot_instance.check_payment_callback, pattern="^check_payment_"))
        self.application.add_handler(CallbackQueryHandler(self.bot_instance.my_info_callback, pattern="my_info"))
        self.application.add_handler(CallbackQueryHandler(self.bot_instance.admin_panel_callback, pattern="admin_panel"))
        self.application.add_handler(CallbackQueryHandler(self.bot_instance.back_to_menu_callback, pattern="back_to_menu"))
        
        # Handlers de configura√ß√£o admin
        config_conv_handler = ConversationHandler(
            entry_points=[CommandHandler("config", self.admin_config_manager.start_config)],
            states={
                self.admin_config_manager.CONFIG_MENU: [
                    CallbackQueryHandler(self.admin_config_manager.handle_config_callback)
                ],
                self.admin_config_manager.CONFIG_SERVERS: [
                    CallbackQueryHandler(self.admin_config_manager.handle_config_callback),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.admin_config_manager.handle_text_input)
                ],
                self.admin_config_manager.CONFIG_PAYMENTS: [
                    CallbackQueryHandler(self.admin_config_manager.handle_config_callback),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.admin_config_manager.handle_text_input)
                ],
                self.admin_config_manager.CONFIG_NOTIFICATIONS: [
                    CallbackQueryHandler(self.admin_config_manager.handle_config_callback)
                ],
                self.admin_config_manager.CONFIG_MESSAGES: [
                    CallbackQueryHandler(self.admin_config_manager.handle_config_callback),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.admin_config_manager.handle_text_input)
                ],
                self.admin_config_manager.CONFIG_USERS: [
                    CallbackQueryHandler(self.admin_config_manager.handle_config_callback)
                ]
            },
            fallbacks=[CommandHandler("cancel", self.admin_config_manager.cancel_config)]
        )
        
        self.application.add_handler(config_conv_handler)
        
        # Comandos de configura√ß√£o r√°pida
        quick_commands = QuickConfigCommands(self.admin_config_manager)
        self.application.add_handler(CommandHandler("setmptoken", quick_commands.set_mp_token_command))
        self.application.add_handler(CommandHandler("addadmin", quick_commands.add_admin_command))
        self.application.add_handler(CommandHandler("setgroup", quick_commands.set_group_command))
        self.application.add_handler(CommandHandler("status", quick_commands.status_command))
        
        # Comandos adicionais
        self.application.add_handler(CommandHandler("help", self._help_command))
        self.application.add_handler(CommandHandler("stats", self._stats_command))
        
        logger.info("‚úÖ Handlers configurados")
    
    async def _help_command(self, update, context):
        """Comando de ajuda"""
        if update.effective_user.id in self.config.admin_ids:
            help_text = """
ü§ñ <b>SSH Bot Premium - Comandos Admin</b>

üìã <b>Comandos B√°sicos:</b>
/start - Menu principal
/help - Esta ajuda
/stats - Estat√≠sticas do bot

‚öôÔ∏è <b>Configura√ß√£o:</b>
/config - Painel de configura√ß√£o completo
/status - Status da configura√ß√£o
/setgroup - Define grupo atual como notifica√ß√µes

üîß <b>Configura√ß√£o R√°pida:</b>
/setmptoken <token> - Define token Mercado Pago
/addadmin <user_id> - Adiciona administrador

üí° <b>Dicas:</b>
‚Ä¢ Use /config para configura√ß√£o completa
‚Ä¢ Configure webhook no painel do Mercado Pago
‚Ä¢ Teste pagamentos em ambiente sandbox primeiro
            """
        else:
            help_text = """
ü§ñ <b>SSH Bot Premium</b>

üìã <b>Comandos Dispon√≠veis:</b>
/start - Menu principal
/help - Esta ajuda

üí° <b>Como usar:</b>
1. Digite /start para acessar o menu
2. Crie sua conta SSH de teste gr√°tis
3. Ou adquira um plano premium

üí¨ <b>Suporte:</b> @proverbiox9
            """
        
        await update.message.reply_text(help_text, parse_mode='HTML')
    
    async def _stats_command(self, update, context):
        """Comando de estat√≠sticas"""
        if update.effective_user.id not in self.config.admin_ids:
            await update.message.reply_text("‚ùå Acesso negado!")
            return
        
        try:
            users = self.db.get_all_users()
            total_users = len(users)
            
            # Estat√≠sticas b√°sicas (implementar contadores reais)
            premium_users = 0  # Implementar contagem real
            sales_today = 0    # Implementar contagem real
            
            stats_text = f"""
üìä <b>ESTAT√çSTICAS DO BOT</b>

üë• <b>Usu√°rios:</b>
‚Ä¢ Total: {total_users}
‚Ä¢ Premium: {premium_users}
‚Ä¢ Gratuitos: {total_users - premium_users}

üí∞ <b>Vendas:</b>
‚Ä¢ Hoje: {sales_today}
‚Ä¢ Este m√™s: Em desenvolvimento
‚Ä¢ Total: Em desenvolvimento

üñ•Ô∏è <b>Servidores:</b>
‚Ä¢ Configurados: {len(self.config.ssh_servers)}
‚Ä¢ Ativos: {len([s for s in self.config.ssh_servers if s.get('active', True)])}

‚öôÔ∏è <b>Sistema:</b>
‚Ä¢ Status: ‚úÖ Online
‚Ä¢ Webhook: {'‚úÖ Ativo' if self.webhook_server else '‚ùå Inativo'}
‚Ä¢ Uptime: {datetime.now().strftime('%d/%m/%Y %H:%M')}
            """
            
            await update.message.reply_text(stats_text, parse_mode='HTML')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå Erro ao obter estat√≠sticas: {e}")
    
    async def run(self):
        """Executa o bot"""
        try:
            await self.initialize()
            
            # Configura handlers de sinal para shutdown graceful
            def signal_handler(signum, frame):
                logger.info("üõë Sinal de parada recebido. Finalizando...")
                self.is_running = False
            
            signal.signal(signal.SIGINT, signal_handler)
            signal.signal(signal.SIGTERM, signal_handler)
            
            self.is_running = True
            
            # Notifica inicializa√ß√£o
            if self.notification_manager:
                await self.notification_manager.notify_system_error(
                    "SISTEMA", 
                    "üöÄ SSH Bot Premium iniciado com sucesso!"
                )
            
            logger.info("üöÄ SSH Bot Premium v2.0 iniciado com sucesso!")
            logger.info(f"üìä Total de usu√°rios: {len(self.db.get_all_users())}")
            
            # Executa bot
            await self.application.run_polling(
                drop_pending_updates=True,
                close_loop=False
            )
            
        except Exception as e:
            logger.error(f"‚ùå Erro durante execu√ß√£o: {e}")
            raise
        finally:
            await self.shutdown()
    
    async def shutdown(self):
        """Finaliza o bot graciosamente"""
        try:
            logger.info("üõë Finalizando SSH Bot Premium...")
            
            # Para webhook se estiver rodando
            if self.webhook_thread and self.webhook_thread.is_alive():
                logger.info("üõë Parando servidor webhook...")
                # O webhook server para automaticamente quando a thread principal termina
            
            # Notifica finaliza√ß√£o
            if self.notification_manager:
                await self.notification_manager.notify_system_error(
                    "SISTEMA",
                    "üõë SSH Bot Premium finalizado"
                )
            
            logger.info("‚úÖ Bot finalizado com sucesso!")
            
        except Exception as e:
            logger.error(f"‚ùå Erro durante finaliza√ß√£o: {e}")

def main():
    """Fun√ß√£o principal"""
    try:
        # Verifica argumentos da linha de comando
        config_file = "config.json"
        if len(sys.argv) > 1:
            config_file = sys.argv[1]
        
        # Cria e executa bot
        bot = IntegratedSSHBot(config_file)
        asyncio.run(bot.run())
        
    except KeyboardInterrupt:
        logger.info("üõë Bot interrompido pelo usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro fatal: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

